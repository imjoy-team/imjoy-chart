{"version":3,"sources":["CustomEditor.js","App.js","index.js"],"names":["download","filename","base64","element","document","createElement","setAttribute","style","display","body","appendChild","click","removeChild","CustomEditor","props","inputFile","React","createRef","exportWidth","exportHeight","exportFormat","exportFileName","_","this","context","localize","logo","logoSrc","src","dataSources","Object","entries","index","value","push","length","exportChart","format","a","plotly","toImage","divId","height","width","replace","menuPanelOrder","group","name","hasTransforms","hasAxes","hasMaps","hasLegend","hasColorbars","hasSliders","hasMenus","children","attr","label","onChange","v","forceUpdate","onUpdate","units","options","clearable","defaultValue","variant","onClick","type","e","handleLoadData","target","files","ref","current","handleSaveData","data","DefaultEditor","config","editable","loadCSV","url","Promise","resolve","reject","Papa","header","dynamicTyping","skipEmptyLines","error","err","file","inputElem","reason","alert","toString","complete","results","result","row","key","transpose","App","plotDivId","Math","random","substr","load","RegExp","exec","location","search","decodeURIComponent","getUrlParameter","saveDataHandler","then","dataSourceOptions","keys","map","col1","col2","col3","state","layout","frames","window","self","top","imjoyRPC","setupRPC","api","export","setup","console","log","run","ctx","setState","getState","on","event","handler","getElementById","points","i","x","y","z","undefined","cleanUpPoints","off","removeAllListeners","split","endsWith","fetch","response","json","Error","Blob","fr","FileReader","addEventListener","JSON","parse","readAsText","className","useResizeHandler","debug","glByDefault","showFieldTooltips","advancedTraceTypeSelector","loadData","bind","Component","ReactDOM","render"],"mappings":"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","file":"static/js/main.e82d3e28.chunk.js","sourcesContent":["import React from \"react\";\nimport plotly from \"plotly.js/dist/plotly\";\nimport {\n  PlotlyFold,\n  PanelMenuWrapper,\n  Info,\n  LayoutPanel,\n  Button,\n  SingleSidebarItem,\n  DefaultEditor,\n  GraphCreatePanel,\n  GraphTransformsPanel,\n  GraphSubplotsPanel,\n  StyleLayoutPanel,\n  StyleAxesPanel,\n  StyleMapsPanel,\n  StyleLegendPanel,\n  StyleNotesPanel,\n  StyleShapesPanel,\n  StyleSlidersPanel,\n  StyleImagesPanel,\n  StyleTracesPanel,\n  StyleColorbarsPanel,\n  StyleUpdateMenusPanel,\n} from \"react-chart-editor\";\nimport Field from \"react-chart-editor/lib/components/fields/Field\";\nimport Logo from \"react-chart-editor/lib/components/widgets/Logo\";\nimport NumericInput from \"react-chart-editor/lib/components/widgets/NumericInput\";\nimport DropdownWidget from \"react-chart-editor/lib/components/widgets/Dropdown\";\nimport TextInput from \"react-chart-editor/lib/components/widgets/TextInput\";\n\nfunction download(filename, base64) {\n  var element = document.createElement(\"a\");\n  element.setAttribute(\"href\", base64);\n  element.setAttribute(\"download\", filename);\n\n  element.style.display = \"none\";\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n}\nexport default class CustomEditor extends DefaultEditor {\n  constructor(props) {\n    super(props);\n    this.inputFile = React.createRef();\n    this.exportWidth = 1024;\n    this.exportHeight = 1024;\n    this.exportFormat = \"png\";\n    this.exportFileName = \"imjoy-chart-export\";\n  }\n\n  render() {\n    const _ = this.context.localize;\n    const logo = this.props.logoSrc && <Logo src={this.props.logoSrc} />;\n\n    const dataSources = [];\n    if (this.props.dataSources) {\n      for (const [index, value] of Object.entries(this.props.dataSources)) {\n        dataSources.push(\n          <li key={index}>\n            {index}:{value.length}\n          </li>\n        );\n      }\n    }\n    const exportChart = async (format) => {\n      format = format || this.exportFormat;\n      const base64 = await plotly.toImage(this.props.divId, {\n        format: format,\n        height: this.exportHeight,\n        width: this.exportWidth,\n      });\n      download(\n        this.exportFileName + \".\" + format.replace(\"full-json\", \"json\"),\n        base64\n      );\n    };\n    return (\n      <PanelMenuWrapper menuPanelOrder={this.props.menuPanelOrder}>\n        {logo ? logo : null}\n        <GraphCreatePanel group={_(\"Structure\")} name={_(\"Traces\")} />\n        <GraphSubplotsPanel group={_(\"Structure\")} name={_(\"Subplots\")} />\n        {this.hasTransforms() && (\n          <GraphTransformsPanel group={_(\"Structure\")} name={_(\"Transforms\")} />\n        )}\n        <StyleLayoutPanel group={_(\"Style\")} name={_(\"General\")} />\n        <StyleTracesPanel group={_(\"Style\")} name={_(\"Traces\")} />\n        {this.hasAxes() && (\n          <StyleAxesPanel group={_(\"Style\")} name={_(\"Axes\")} />\n        )}\n        {this.hasMaps() && (\n          <StyleMapsPanel group={_(\"Style\")} name={_(\"Maps\")} />\n        )}\n        {this.hasLegend() && (\n          <StyleLegendPanel group={_(\"Style\")} name={_(\"Legend\")} />\n        )}\n        {this.hasColorbars() && (\n          <StyleColorbarsPanel group={_(\"Style\")} name={_(\"Color Bars\")} />\n        )}\n        <StyleNotesPanel group={_(\"Annotate\")} name={_(\"Text\")} />\n        <StyleShapesPanel group={_(\"Annotate\")} name={_(\"Shapes\")} />\n        <StyleImagesPanel group={_(\"Annotate\")} name={_(\"Images\")} />\n        {this.hasSliders() && (\n          <StyleSlidersPanel group={_(\"Control\")} name={_(\"Sliders\")} />\n        )}\n        {this.hasMenus() && (\n          <StyleUpdateMenusPanel group={_(\"Control\")} name={_(\"Menus\")} />\n        )}\n        {this.props.children ? this.props.children : null}\n\n        {/* ---custom widgets-- */}\n        <LayoutPanel group={_(\"Annotate\")} name={_(\"Info\")}>\n          <PlotlyFold name=\"PlotlyFold\">\n            <Info attr=\"title\">\n              <p>\n                This custom editor demonstrates the general-purpose container\n                and field components.\n              </p>\n              <p>\n                This is an <code>Info</code> component.\n              </p>\n            </Info>\n          </PlotlyFold>\n        </LayoutPanel>\n        <LayoutPanel group={_(\"Export\")} name=\"image\">\n          <PlotlyFold>\n            <Field label=\"Width\">\n              <NumericInput\n                value={this.exportWidth}\n                onChange={(v) => {\n                  this.exportWidth = v;\n                  this.forceUpdate();\n                }}\n                onUpdate={(v) => {\n                  this.exportWidth = v;\n                  this.forceUpdate();\n                }}\n                units=\"px\"\n              />\n            </Field>\n            <Field label=\"Height\">\n              <NumericInput\n                value={this.exportHeight}\n                onChange={(v) => {\n                  this.exportHeight = v;\n                  this.forceUpdate();\n                }}\n                onUpdate={(v) => {\n                  this.exportHeight = v;\n                  this.forceUpdate();\n                }}\n                units=\"px\"\n              />\n            </Field>\n\n            <Field label=\"Format\">\n              <DropdownWidget\n                options={[\n                  { label: \"PNG\", value: \"png\" },\n                  { label: \"JPEG\", value: \"jpeg\" },\n                  { label: \"WEBP\", value: \"webp\" },\n                  { label: \"SVG\", value: \"svg\" },\n                  { label: \"JSON\", value: \"full-json\" },\n                ]}\n                value={this.exportFormat}\n                onChange={(v) => {\n                  this.exportFormat = v;\n                  this.forceUpdate();\n                }}\n                clearable={false}\n              />\n            </Field>\n            <Field label=\"File Name\">\n              <TextInput\n                value={this.exportFileName}\n                defaultValue={this.exportFileName}\n                onUpdate={(v) => {\n                  this.exportFileName = v;\n                  this.forceUpdate();\n                }}\n              />\n            </Field>\n\n            <Field>\n              <Button\n                variant=\"primary\"\n                label=\"Export\"\n                onClick={() => {\n                  exportChart();\n                }}\n              />\n            </Field>\n          </PlotlyFold>\n        </LayoutPanel>\n        <SingleSidebarItem>\n          <input\n            type=\"file\"\n            onChange={(e) => {\n              this.props.handleLoadData(e.target.files[0]);\n            }}\n            ref={this.inputFile}\n            style={{ display: \"none\" }}\n          />\n          <Button\n            variant=\"primary\"\n            label=\"Load\"\n            onClick={() => {\n              this.inputFile.current.click();\n            }}\n          />\n        </SingleSidebarItem>\n\n        <SingleSidebarItem>\n          <Button\n            variant=\"primary\"\n            label=\"save\"\n            onClick={async () => {\n              if (this.props.handleSaveData)\n                this.props.handleLoadData(this.props.data);\n              else exportChart(\"full-json\");\n            }}\n          />\n        </SingleSidebarItem>\n      </PanelMenuWrapper>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport plotly from \"plotly.js/dist/plotly\";\nimport PlotlyEditor from \"react-chart-editor\";\nimport CustomEditor from \"./CustomEditor\";\nimport \"react-chart-editor/lib/react-chart-editor.css\";\nimport { imjoyRPC } from \"imjoy-rpc\";\nimport * as Papa from \"papaparse\";\n\nconst config = { editable: true };\n\nfunction loadCSV(url) {\n  return new Promise((resolve, reject) => {\n    Papa.parse(url, {\n      download: true,\n      header: true,\n      dynamicTyping: true,\n      skipEmptyLines: true,\n      error: (err, file, inputElem, reason) => {\n        alert(\"Falied to load the table: \" + reason.toString());\n        reject(reason);\n      },\n      complete: (results) => {\n        resolve(transpose(results.data));\n      },\n    });\n  });\n}\n\nfunction transpose(data) {\n  let result = {};\n  for (let row of data) {\n    for (let [key, value] of Object.entries(row)) {\n      result[key] = result[key] || [];\n      result[key].push(value);\n    }\n  }\n  return result;\n}\n\nfunction randId() {\n  return \"_\" + Math.random().toString(36).substr(2, 9);\n}\n\nfunction getUrlParameter(name) {\n  name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n  var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\");\n  var results = regex.exec(location.search);\n  return results === null\n    ? \"\"\n    : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n}\n\nfunction cleanUpPoints(points) {\n  const data = [];\n  for (let i = 0; i < points.length; i++) {\n    data.push({\n      x: points[i].x,\n      y: points[i].y,\n      z: points[i].z || undefined,\n    });\n  }\n  return data;\n}\nclass App extends Component {\n  constructor() {\n    super();\n    this.plotDivId = randId();\n    let load = getUrlParameter(\"load\");\n    this.saveDataHandler = null;\n    if (load) {\n      loadCSV(load).then((data) => {\n        this.dataSources = data;\n        this.dataSourceOptions = Object.keys(this.dataSources).map((name) => ({\n          value: name,\n          label: name,\n        }));\n        this.forceUpdate();\n      });\n    } else {\n      this.dataSources = {\n        col1: [1, 2, 3], // eslint-disable-line no-magic-numbers\n        col2: [4, 3, 2], // eslint-disable-line no-magic-numbers\n        col3: [17, 13, 9], // eslint-disable-line no-magic-numbers\n      };\n\n      this.dataSourceOptions = Object.keys(this.dataSources).map((name) => ({\n        value: name,\n        label: name,\n      }));\n    }\n    this.state = {\n      data: [],\n      layout: {},\n      frames: [],\n    };\n    // if inside an iframe, setup imjoy rpc\n    if (window.self !== window.top) {\n      const self = this;\n      imjoyRPC.setupRPC({ name: \"ImJoy Chart Editor\" }).then((api) => {\n        api.export({\n          setup() {\n            console.log(\"imjoy-rpc initialized.\");\n          },\n          run(ctx) {\n            if (ctx && ctx.config) {\n              self.saveDataHandler = ctx.config.saveDataHandler;\n            }\n            if (ctx && ctx.data) {\n              self.setState(ctx.data);\n              self.dataSources = ctx.data.dataSources || {};\n              self.dataSourceOptions =\n                ctx.data.dataSourceOptions ||\n                Object.keys(self.dataSources).map((name) => ({\n                  value: name,\n                  label: name,\n                }));\n              if (self.state.dataSources) delete self.data.dataSources;\n              if (self.state.dataSourceOptions)\n                delete self.data.dataSourceOptions;\n            }\n            self.forceUpdate();\n          },\n          setState(state) {\n            self.setState(state);\n            self.forceUpdate();\n          },\n          getState() {\n            return self.state;\n          },\n          on(event, handler) {\n            document.getElementById(this.plotDivId).on(event, (data) => {\n              if (data.points) handler(cleanUpPoints(data.points));\n              else {\n                handler(data);\n              }\n            });\n          },\n          off(event) {\n            document.getElementById(this.plotDivId).removeAllListeners(event);\n          },\n        });\n      });\n    }\n  }\n\n  async loadData(file) {\n    if (typeof file === \"string\") {\n      if (file.split(\"?\")[0].endsWith(\".json\")) {\n        const response = await fetch(file);\n        const data = await response.json();\n        if (data.data && data.layout) {\n          this.setState(data);\n          this.forceUpdate();\n        } else {\n          throw new Error(\"Invalid file type\");\n        }\n      } else if (!file.split(\"?\")[0].endsWith(\".csv\")) {\n        throw new Error(\n          \"Invalid file extension, only .json and .csv are supported\"\n        );\n      }\n    } else if (file instanceof Blob) {\n      if (file.name.endsWith(\".json\")) {\n        const fr = new FileReader();\n        fr.addEventListener(\"load\", (e) => {\n          const data = JSON.parse(fr.result);\n          if (data.data && data.layout) {\n            this.setState(data);\n            this.forceUpdate();\n          } else {\n            throw new Error(\"Invalid file type\");\n          }\n        });\n\n        fr.readAsText(file);\n      }\n    }\n    const data = await loadCSV(file);\n    this.dataSources = data;\n    this.dataSourceOptions = Object.keys(this.dataSources).map((name) => ({\n      value: name,\n      label: name,\n    }));\n    this.forceUpdate();\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <PlotlyEditor\n          data={this.state.data}\n          layout={this.state.layout}\n          config={config}\n          frames={this.state.frames}\n          dataSources={this.dataSources}\n          dataSourceOptions={this.dataSourceOptions}\n          plotly={plotly}\n          onUpdate={(data, layout, frames) => {\n            this.setState({ data, layout, frames });\n          }}\n          useResizeHandler\n          debug\n          glByDefault\n          showFieldTooltips\n          advancedTraceTypeSelector\n          divId={this.plotDivId}\n        >\n          <CustomEditor\n            logoSrc={\"./static/icons/favicon-96x96.png\"}\n            dataSources={this.dataSources}\n            divId={this.plotDivId}\n            data={this.state}\n            handleSaveData={this.saveDataHandler}\n            handleLoadData={this.loadData.bind(this)}\n          />\n        </PlotlyEditor>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}