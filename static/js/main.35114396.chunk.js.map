{"version":3,"sources":["CustomEditor.js","App.js","index.js"],"names":["download","filename","base64","element","document","createElement","setAttribute","style","display","body","appendChild","click","removeChild","CustomEditor","props","inputFile","React","createRef","exportWidth","exportHeight","exportFormat","exportFileName","_","this","context","localize","logo","logoSrc","src","dataSources","Object","entries","index","value","push","length","widgets","widget","type","name","padding","schema","uiSchema","onChange","e","apply","onSubmit","onError","width","objectFit","dangerouslySetInnerHTML","__html","exportChart","format","a","plotly","toImage","divId","height","replace","menuPanelOrder","group","hasTransforms","hasAxes","hasMaps","hasLegend","hasColorbars","hasSliders","hasMenus","children","label","v","forceUpdate","onUpdate","units","options","clearable","defaultValue","variant","onClick","handleLoadData","target","files","ref","current","handleSaveData","data","DefaultEditor","config","editable","loadCSV","url","Promise","resolve","reject","Papa","startsWith","header","dynamicTyping","skipEmptyLines","error","err","file","inputElem","reason","alert","toString","complete","results","result","row","key","transpose","getUrlParameter","RegExp","exec","location","search","decodeURIComponent","dtypeToTypedArray","int8","Int8Array","int16","Int16Array","int32","Int32Array","uint8","Uint8Array","uint16","Uint16Array","uint32","Uint32Array","float32","Float32Array","float64","Float64Array","array","Array","App","plotDivId","Math","random","substr","_initPromise","_initPromiseResolve","load","hideControls","saveDataHandler","loadDataHandler","loadData","col1","col2","col3","dataSourceOptions","keys","map","state","layout","frames","window","self","top","imjoyRPC","setupRPC","then","api","registerCodec","decoder","obj","_rdtype","ret","ArrayBuffer","_rvalue","byteLength","i","Int64LE","toNumber","Uint64LE","arrayType","export","setup","console","log","run","ctx","undefined","setState","loadDataSource","hide","setWidgets","addWidget","removeWidget","w","filter","wd","Error","splice","indexOf","updateWidget","getState","addListener","event","callback","getElementById","on","points","customdata","k","pointIndex","x","y","z","cleanUpPoints","removeAllListeners","setTimeout","Blob","split","endsWith","fetch","response","json","fr","FileReader","addEventListener","JSON","parse","readAsText","className","rel","position","cursor","zIndex","left","xmlns","viewBox","enableBackground","d","useResizeHandler","debug","glByDefault","showFieldTooltips","advancedTraceTypeSelector","bind","Component","ReactDOM","render"],"mappings":"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","file":"static/js/main.35114396.chunk.js","sourcesContent":["import React from \"react\";\nimport plotly from \"plotly.js/dist/plotly\";\nimport Form from \"@rjsf/core\";\n\nimport {\n  PlotlyFold,\n  PanelMenuWrapper,\n  Info,\n  LayoutPanel,\n  Button,\n  SingleSidebarItem,\n  DefaultEditor,\n  GraphCreatePanel,\n  GraphTransformsPanel,\n  GraphSubplotsPanel,\n  StyleLayoutPanel,\n  StyleAxesPanel,\n  StyleMapsPanel,\n  StyleLegendPanel,\n  StyleNotesPanel,\n  StyleShapesPanel,\n  StyleSlidersPanel,\n  StyleImagesPanel,\n  StyleTracesPanel,\n  StyleColorbarsPanel,\n  StyleUpdateMenusPanel,\n} from \"react-chart-editor\";\nimport Field from \"react-chart-editor/lib/components/fields/Field\";\nimport Logo from \"react-chart-editor/lib/components/widgets/Logo\";\nimport NumericInput from \"react-chart-editor/lib/components/widgets/NumericInput\";\nimport DropdownWidget from \"react-chart-editor/lib/components/widgets/Dropdown\";\nimport TextInput from \"react-chart-editor/lib/components/widgets/TextInput\";\n\nfunction download(filename, base64) {\n  const element = document.createElement(\"a\");\n  element.setAttribute(\"href\", base64);\n  element.setAttribute(\"download\", filename);\n\n  element.style.display = \"none\";\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n}\nexport default class CustomEditor extends DefaultEditor {\n  constructor(props) {\n    super(props);\n    this.inputFile = React.createRef();\n    this.exportWidth = 1024;\n    this.exportHeight = 1024;\n    this.exportFormat = \"png\";\n    this.exportFileName = \"imjoy-chart-export\";\n  }\n\n  render() {\n    const _ = this.context.localize;\n    const logo = this.props.logoSrc && <Logo src={this.props.logoSrc} />;\n\n    const dataSources = [];\n    if (this.props.dataSources) {\n      for (const [index, value] of Object.entries(this.props.dataSources)) {\n        dataSources.push(\n          <li key={index}>\n            {index}:{value.length}\n          </li>\n        );\n      }\n    }\n\n    const widgets = [];\n    if (this.props.widgets) {\n      for (let widget of this.props.widgets) {\n        if (widget.type === \"form\") {\n          widgets.push(\n            <PlotlyFold name={widget.name} key={widget.name}>\n              <div style={{ padding: \"10px\" }}>\n                <Form\n                  schema={widget.schema}\n                  uiSchema={widget.uiSchema}\n                  onChange={(e) => {\n                    widget.onChange && widget.onChange.apply(null, [e]);\n                  }}\n                  onSubmit={(e) => {\n                    widget.onSubmit && widget.onSubmit.apply(null, [e]);\n                  }}\n                  onError={(e) => {\n                    widget.onError && widget.onError.apply(null, [e]);\n                  }}\n                />\n              </div>\n            </PlotlyFold>\n          );\n        } else if (widget.type === \"image\") {\n          widgets.push(\n            <PlotlyFold name={widget.name} key={widget.name}>\n              {widget.src && (\n                <img\n                  style={{ width: \"100%\", objectFit: \"cover\" }}\n                  src={widget.src}\n                ></img>\n              )}\n            </PlotlyFold>\n          );\n        } else if (widget.type === \"html\") {\n          widgets.push(\n            <PlotlyFold name={widget.name} key={widget.name}>\n              <div style={{ padding: \"10px\" }}>\n                <div dangerouslySetInnerHTML={{ __html: widget.body }} />\n              </div>\n            </PlotlyFold>\n          );\n        }\n      }\n    }\n\n    const exportChart = async (format) => {\n      format = format || this.exportFormat;\n      const base64 = await plotly.toImage(this.props.divId, {\n        format: format,\n        height: this.exportHeight,\n        width: this.exportWidth,\n      });\n      download(\n        this.exportFileName + \".\" + format.replace(\"full-json\", \"json\"),\n        base64\n      );\n    };\n    return (\n      <PanelMenuWrapper menuPanelOrder={this.props.menuPanelOrder}>\n        {logo ? logo : null}\n        <GraphCreatePanel group={_(\"Structure\")} name={_(\"Traces\")} />\n        <GraphSubplotsPanel group={_(\"Structure\")} name={_(\"Subplots\")} />\n        {this.hasTransforms() && (\n          <GraphTransformsPanel group={_(\"Structure\")} name={_(\"Transforms\")} />\n        )}\n        <StyleLayoutPanel group={_(\"Style\")} name={_(\"General\")} />\n        <StyleTracesPanel group={_(\"Style\")} name={_(\"Traces\")} />\n        {this.hasAxes() && (\n          <StyleAxesPanel group={_(\"Style\")} name={_(\"Axes\")} />\n        )}\n        {this.hasMaps() && (\n          <StyleMapsPanel group={_(\"Style\")} name={_(\"Maps\")} />\n        )}\n        {this.hasLegend() && (\n          <StyleLegendPanel group={_(\"Style\")} name={_(\"Legend\")} />\n        )}\n        {this.hasColorbars() && (\n          <StyleColorbarsPanel group={_(\"Style\")} name={_(\"Color Bars\")} />\n        )}\n        <StyleNotesPanel group={_(\"Annotate\")} name={_(\"Text\")} />\n        <StyleShapesPanel group={_(\"Annotate\")} name={_(\"Shapes\")} />\n        <StyleImagesPanel group={_(\"Annotate\")} name={_(\"Images\")} />\n        {this.hasSliders() && (\n          <StyleSlidersPanel group={_(\"Control\")} name={_(\"Sliders\")} />\n        )}\n        {this.hasMenus() && (\n          <StyleUpdateMenusPanel group={_(\"Control\")} name={_(\"Menus\")} />\n        )}\n        {this.props.children ? this.props.children : null}\n\n        {/* ---custom widgets-- */}\n        <LayoutPanel group={_(\"Info\")} name={_(\"Info\")}>\n          {widgets}\n        </LayoutPanel>\n        <LayoutPanel group={_(\"Export\")} name=\"image\">\n          <PlotlyFold>\n            <Field label=\"Width\">\n              <NumericInput\n                value={this.exportWidth}\n                onChange={(v) => {\n                  this.exportWidth = v;\n                  this.forceUpdate();\n                }}\n                onUpdate={(v) => {\n                  this.exportWidth = v;\n                  this.forceUpdate();\n                }}\n                units=\"px\"\n              />\n            </Field>\n            <Field label=\"Height\">\n              <NumericInput\n                value={this.exportHeight}\n                onChange={(v) => {\n                  this.exportHeight = v;\n                  this.forceUpdate();\n                }}\n                onUpdate={(v) => {\n                  this.exportHeight = v;\n                  this.forceUpdate();\n                }}\n                units=\"px\"\n              />\n            </Field>\n\n            <Field label=\"Format\">\n              <DropdownWidget\n                options={[\n                  { label: \"PNG\", value: \"png\" },\n                  { label: \"JPEG\", value: \"jpeg\" },\n                  { label: \"WEBP\", value: \"webp\" },\n                  { label: \"SVG\", value: \"svg\" },\n                  { label: \"JSON\", value: \"full-json\" },\n                ]}\n                value={this.exportFormat}\n                onChange={(v) => {\n                  this.exportFormat = v;\n                  this.forceUpdate();\n                }}\n                clearable={false}\n              />\n            </Field>\n            <Field label=\"File Name\">\n              <TextInput\n                value={this.exportFileName}\n                defaultValue={this.exportFileName}\n                onUpdate={(v) => {\n                  this.exportFileName = v;\n                  this.forceUpdate();\n                }}\n              />\n            </Field>\n\n            <Field>\n              <Button\n                variant=\"primary\"\n                label=\"Export\"\n                onClick={() => {\n                  exportChart();\n                }}\n              />\n            </Field>\n          </PlotlyFold>\n        </LayoutPanel>\n        <SingleSidebarItem>\n          <input\n            type=\"file\"\n            onChange={(e) => {\n              this.props.handleLoadData(e.target.files[0]);\n            }}\n            ref={this.inputFile}\n            style={{ display: \"none\" }}\n          />\n          <Button\n            variant=\"primary\"\n            label=\"Load\"\n            onClick={() => {\n              this.inputFile.current.click();\n            }}\n          />\n        </SingleSidebarItem>\n\n        <SingleSidebarItem>\n          <Button\n            variant=\"primary\"\n            label=\"save\"\n            onClick={async () => {\n              if (this.props.handleSaveData)\n                this.props.handleSaveData(this.props.data);\n              else exportChart(\"full-json\");\n            }}\n          />\n        </SingleSidebarItem>\n      </PanelMenuWrapper>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport plotly from \"plotly.js/dist/plotly\";\nimport PlotlyEditor from \"react-chart-editor\";\nimport CustomEditor from \"./CustomEditor\";\nimport \"react-chart-editor/lib/react-chart-editor.css\";\nimport { imjoyRPC } from \"imjoy-rpc\";\nimport * as Papa from \"papaparse\";\nimport { Uint64LE, Int64LE } from \"int64-buffer\";\n\nconst config = { editable: true };\n\nfunction loadCSV(url) {\n  return new Promise((resolve, reject) => {\n    Papa.parse(url, {\n      download: typeof url === \"string\" && url.startsWith(\"http\"),\n      header: true,\n      dynamicTyping: true,\n      skipEmptyLines: true,\n      error: (err, file, inputElem, reason) => {\n        alert(\"Falied to load the table: \" + reason.toString());\n        reject(reason);\n      },\n      complete: (results) => {\n        resolve(transpose(results.data));\n      },\n    });\n  });\n}\n\nfunction transpose(data) {\n  let result = {};\n  for (let row of data) {\n    for (let [key, value] of Object.entries(row)) {\n      result[key] = result[key] || [];\n      result[key].push(value);\n    }\n  }\n  return result;\n}\n\nfunction randId() {\n  return \"_\" + Math.random().toString(36).substr(2, 9);\n}\n\nfunction getUrlParameter(name) {\n  name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n  var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\");\n  var results = regex.exec(location.search);\n  return results === null\n    ? \"\"\n    : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n}\n\nfunction cleanUpPoints(dataSources, points) {\n  const data = [];\n  for (let i = 0; i < points.length; i++) {\n    const customdata = {};\n    for (let k of Object.keys(dataSources)) {\n      customdata[k] = dataSources[k][points[i].pointIndex];\n    }\n    data.push({\n      pointIndex: points[i].pointIndex,\n      x: points[i].x,\n      y: points[i].y,\n      z: points[i].z || undefined,\n      customdata: customdata,\n    });\n  }\n  return data;\n}\n\nconst dtypeToTypedArray = {\n  int8: Int8Array,\n  int16: Int16Array,\n  int32: Int32Array,\n  uint8: Uint8Array,\n  uint16: Uint16Array,\n  uint32: Uint32Array,\n  float32: Float32Array,\n  float64: Float64Array,\n  array: Array,\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.widgets = [];\n    this.plotDivId = randId();\n    this._initPromise = new Promise((resolve) => {\n      this._initPromiseResolve = resolve;\n    });\n    let load = getUrlParameter(\"load\");\n    this.hideControls = !!getUrlParameter(\"hideControls\");\n    this.saveDataHandler = null;\n    this.loadDataHandler = null;\n    if (load) {\n      this.loadData(load);\n    } else {\n      this.dataSources = {\n        col1: [1, 2, 3], // eslint-disable-line no-magic-numbers\n        col2: [4, 3, 2], // eslint-disable-line no-magic-numbers\n        col3: [17, 13, 9], // eslint-disable-line no-magic-numbers\n      };\n\n      this.dataSourceOptions = Object.keys(this.dataSources).map((name) => ({\n        value: name,\n        label: name,\n      }));\n    }\n    this.state = {\n      data: [],\n      layout: {},\n      frames: [],\n    };\n    // if inside an iframe, setup imjoy rpc\n    if (window.self !== window.top) {\n      const self = this;\n      imjoyRPC.setupRPC({ name: \"ImJoy Chart Editor\" }).then((api) => {\n        api.registerCodec({\n          name: \"ndarray\",\n          decoder(obj) {\n            if (obj._rdtype === \"int64\") {\n              const ret = new Uint32Array(\n                new ArrayBuffer(obj._rvalue.byteLength / 2)\n              );\n              for (let i = 0; i < obj._rvalue.byteLength; i += 8) {\n                ret[i / 8] = new Int64LE(obj._rvalue, i).toNumber();\n              }\n              return ret;\n            }\n            if (obj._rdtype === \"uint64\") {\n              const ret = new Uint32Array(\n                new ArrayBuffer(obj._rvalue.byteLength / 2)\n              );\n              for (let i = 0; i < obj._rvalue.byteLength; i += 8) {\n                ret[i / 8] = new Uint64LE(obj._rvalue, i).toNumber();\n              }\n              return ret;\n            }\n            const arrayType = dtypeToTypedArray[obj._rdtype];\n            return new arrayType(obj._rvalue);\n          },\n        });\n        api.export({\n          async setup() {\n            console.log(\"imjoy-rpc initialized.\");\n            await self._initPromise;\n          },\n          async run(ctx) {\n            if (ctx && ctx.config) {\n              if (ctx.config.saveDataHandler !== undefined)\n                self.saveDataHandler = ctx.config.saveDataHandler;\n              if (ctx.config.loadDataHandler !== undefined)\n                self.loadDataHandler = ctx.config.loadDataHandler;\n              if (ctx.config.hideControls !== undefined)\n                self.hideControls = ctx.config.hideControls;\n            }\n            if (ctx && ctx.data) {\n              self.dataSources = ctx.data.dataSources || {};\n              self.dataSourceOptions =\n                ctx.data.dataSourceOptions ||\n                Object.keys(self.dataSources).map((name) => ({\n                  value: name,\n                  label: name,\n                }));\n              if (self.state.dataSources) delete self.state.dataSources;\n              if (self.state.dataSourceOptions)\n                delete self.state.dataSourceOptions;\n              self.setState(ctx.data);\n            }\n            self.forceUpdate();\n          },\n          async loadDataSource(file) {\n            await self.loadData(file);\n          },\n          hideControls(hide) {\n            self.hideControls = hide;\n            self.forceUpdate();\n          },\n          setWidgets(widgets) {\n            self.widgets = widgets;\n            self.forceUpdate();\n          },\n          addWidget(widget) {\n            self.widgets.push(widget);\n            self.forceUpdate();\n          },\n          removeWidget() {\n            const w = self.widgets.filter((wd) => wd.name === widget.name)[0];\n            if (w) {\n              // remove widget\n              self.widgets.splice(self.widgets.indexOf(w), 1);\n              self.forceUpdate();\n            } else {\n              throw new Error(\"Widget not found: \" + widget.name);\n            }\n          },\n          updateWidget(widget) {\n            const w = self.widgets.filter((wd) => wd.name === widget.name)[0];\n            if (w) {\n              // replace widget\n              self.widgets[self.widgets.indexOf(w)] = widget;\n              self.forceUpdate();\n            } else {\n              throw new Error(\"Widget not found: \" + widget.name);\n            }\n          },\n          setState(state) {\n            self.setState(state);\n            self.forceUpdate();\n          },\n          getState() {\n            return self.state;\n          },\n          addListener({ event, callback }) {\n            document.getElementById(self.plotDivId).on(event, (data) => {\n              if (data.points)\n                callback(cleanUpPoints(self.dataSources, data.points));\n              else {\n                callback(data);\n              }\n            });\n          },\n          removeAllListeners(event) {\n            document.getElementById(self.plotDivId).removeAllListeners(event);\n          },\n        });\n      });\n    }\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this._initPromiseResolve();\n    }, 0);\n  }\n\n  async loadData(file) {\n    let data;\n    if (file instanceof Blob) {\n      data = await loadCSV(file);\n    } else if (typeof file === \"object\") {\n      data = file;\n    } else {\n      if (typeof file === \"string\" && file.startsWith(\"http\")) {\n        if (file.split(\"?\")[0].endsWith(\".json\")) {\n          const response = await fetch(file);\n          const data = await response.json();\n          if (data.data && data.layout) {\n            this.setState(data);\n            this.forceUpdate();\n            return;\n          } else {\n            throw new Error(\"Invalid file type\");\n          }\n        } else if (!file.split(\"?\")[0].endsWith(\".csv\")) {\n          throw new Error(\n            \"Invalid file extension, only .json and .csv are supported\"\n          );\n        }\n      } else if (file instanceof Blob) {\n        if (file.name.endsWith(\".json\")) {\n          const fr = new FileReader();\n          fr.addEventListener(\"load\", (e) => {\n            const data = JSON.parse(fr.result);\n            if (data.data && data.layout) {\n              this.setState(data);\n              this.forceUpdate();\n            } else {\n              throw new Error(\"Invalid file type\");\n            }\n          });\n\n          fr.readAsText(file);\n        }\n      }\n      data = await loadCSV(file);\n    }\n    this.dataSources = data;\n    this.dataSourceOptions = Object.keys(this.dataSources).map((name) => ({\n      value: name,\n      label: name,\n    }));\n    this.forceUpdate();\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        {this.hideControls && (\n          <div className=\"modebar-group\">\n            <a\n              rel=\"tooltip\"\n              className=\"modebar-btn\"\n              style={{\n                position: \"absolute\",\n                cursor: \"pointer\",\n                zIndex: 9,\n                height: \"2rem\",\n                width: \"2rem\",\n                left: \"0\",\n                top: \"0\",\n              }}\n              onClick={() => {\n                this.hideControls = false;\n                this.forceUpdate();\n              }}\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"icon\"\n                height=\"2em\"\n                width=\"2em\"\n                viewBox=\"0 0 50 50\"\n                enableBackground=\"new 0 0 50 50\"\n              >\n                <path d=\"M9.6 40.4l2.5-9.9L27 15.6l7.4 7.4-14.9 14.9-9.9 2.5zm4.3-8.9l-1.5 6.1 6.1-1.5L31.6 23 27 18.4 13.9 31.5z\" />\n                <path d=\"M17.8 37.3c-.6-2.5-2.6-4.5-5.1-5.1l.5-1.9c3.2.8 5.7 3.3 6.5 6.5l-1.9.5z\" />\n                <path d=\"M29.298 19.287l1.414 1.414-13.01 13.02-1.414-1.412z\" />\n                <path d=\"M11 39l2.9-.7c-.3-1.1-1.1-1.9-2.2-2.2L11 39z\" />\n                <path d=\"M35 22.4L27.6 15l3-3 .5.1c3.6.5 6.4 3.3 6.9 6.9l.1.5-3.1 2.9zM30.4 15l4.6 4.6.9-.9c-.5-2.3-2.3-4.1-4.6-4.6l-.9.9z\" />\n              </svg>\n            </a>\n          </div>\n        )}\n        <PlotlyEditor\n          hideControls={this.hideControls}\n          data={this.state.data}\n          layout={this.state.layout}\n          config={config}\n          frames={this.state.frames}\n          dataSources={this.dataSources}\n          dataSourceOptions={this.dataSourceOptions}\n          plotly={plotly}\n          onUpdate={(data, layout, frames) => {\n            this.setState({ data, layout, frames });\n          }}\n          useResizeHandler\n          debug\n          glByDefault\n          showFieldTooltips\n          advancedTraceTypeSelector\n          divId={this.plotDivId}\n        >\n          <CustomEditor\n            logoSrc={\"./static/icons/favicon-96x96.png\"}\n            dataSources={this.dataSources}\n            divId={this.plotDivId}\n            data={this.state}\n            widgets={this.widgets}\n            handleSaveData={this.saveDataHandler}\n            handleLoadData={this.loadDataHandler || this.loadData.bind(this)}\n          />\n        </PlotlyEditor>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}