{"version":3,"sources":["CustomEditor.js","App.js","index.js"],"names":["download","filename","base64","element","document","createElement","setAttribute","style","display","body","appendChild","click","removeChild","CustomEditor","props","context","state","content","accepted","rejected","a","_","this","localize","length","setState","className","handleLoadData","logo","logoSrc","src","dataSources","Object","entries","index","value","push","onDrop","bind","menuPanelOrder","group","name","activeClassName","rejectClassName","getRootProps","getInputProps","variant","label","onClick","url","prompt","hasTransforms","hasAxes","hasMaps","hasLegend","hasColorbars","hasSliders","hasMenus","children","attr","plotly","toImage","divId","format","height","width","JSON","stringify","data","DefaultEditor","config","editable","loadCSV","Promise","resolve","reject","Papa","header","dynamicTyping","skipEmptyLines","error","err","file","inputElem","reason","alert","toString","complete","results","result","row","key","transpose","App","load","replace","RegExp","exec","location","search","decodeURIComponent","getUrlParameter","then","dataSourceOptions","keys","map","forceUpdate","col1","col2","col3","layout","frames","window","self","top","imjoyRPC","setupRPC","api","export","setup","console","log","run","ctx","getState","split","endsWith","fetch","response","json","Error","Blob","fr","FileReader","addEventListener","e","parse","readAsText","plotDivId","Math","random","substr","onUpdate","useResizeHandler","debug","glByDefault","showFieldTooltips","advancedTraceTypeSelector","loadData","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.28e4e680.chunk.js","sourcesContent":["import React from \"react\";\nimport plotly from \"plotly.js/dist/plotly\";\nimport {\n  PlotlyFold,\n  PanelMenuWrapper,\n  Info,\n  LayoutPanel,\n  Button,\n  SingleSidebarItem,\n  DefaultEditor,\n  GraphCreatePanel,\n  GraphTransformsPanel,\n  GraphSubplotsPanel,\n  StyleLayoutPanel,\n  StyleAxesPanel,\n  StyleMapsPanel,\n  StyleLegendPanel,\n  StyleNotesPanel,\n  StyleShapesPanel,\n  StyleSlidersPanel,\n  StyleImagesPanel,\n  StyleTracesPanel,\n  StyleColorbarsPanel,\n  StyleUpdateMenusPanel,\n} from \"react-chart-editor\";\n\nimport Logo from \"react-chart-editor/lib/components/widgets/Logo\";\nimport Drop from \"react-dropzone\";\n\nimport Field from \"react-chart-editor/lib/components/fields/Field\";\n\nfunction download(filename, base64) {\n  var element = document.createElement(\"a\");\n  element.setAttribute(\"href\", base64);\n  element.setAttribute(\"download\", filename);\n\n  element.style.display = \"none\";\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n}\nexport default class CustomEditor extends DefaultEditor {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      content:\n        \"Drop a file to upload here or click to choose a file from your computer.\",\n    };\n  }\n\n  async onDrop(accepted, rejected) {\n    const _ = this.context.localize;\n    if (accepted.length) {\n      if (accepted.length > 1) {\n        this.setState({\n          content: (\n            <div className=\"dropzone-container__message\">\n              <p>{_(\"Yikes! You can only upload one file at a time.\")}</p>\n            </div>\n          ),\n        });\n        return;\n      }\n\n      try {\n        this.setState({ content: _(\"Loading...\") });\n        await this.props.handleLoadData(accepted[0]);\n      } catch (e) {\n        throw e;\n      } finally {\n        this.setState({ content: _(\"File loaded.\") });\n      }\n    }\n\n    if (rejected.length) {\n      this.setState({\n        content: \"Failed to load file\",\n      });\n    }\n  }\n\n  render() {\n    const _ = this.context.localize;\n    const logo = this.props.logoSrc && <Logo src={this.props.logoSrc} />;\n\n    const dataSources = [];\n    if (this.props.dataSources) {\n      for (const [index, value] of Object.entries(this.props.dataSources)) {\n        dataSources.push(\n          <li key={index}>\n            {index}:{value.length}\n          </li>\n        );\n      }\n    }\n\n    const onDrop = this.onDrop.bind(this);\n    return (\n      <PanelMenuWrapper menuPanelOrder={this.props.menuPanelOrder}>\n        {logo ? logo : null}\n        <LayoutPanel group={_(\"Data\")} name={_(\"Import\")}>\n          <Field>\n            <Drop\n              onDrop={onDrop}\n              activeClassName=\"dropzone-container--active\"\n              rejectClassName=\"dropzone-container--rejected\"\n            >\n              {({ getRootProps, getInputProps }) => (\n                <div {...getRootProps()} className=\"dropzone-container\">\n                  <input {...getInputProps()} />\n                  <div className=\"dropzone-container__content\">\n                    {this.state.content}\n                  </div>\n                </div>\n              )}\n            </Drop>\n          </Field>\n\n          <Button\n            variant=\"primary\"\n            label=\"Load from URL\"\n            onClick={() => {\n              const url = prompt(\"Data URL\");\n              if (url) {\n                this.props.handleLoadData(url);\n              }\n            }}\n          />\n        </LayoutPanel>\n        <GraphCreatePanel group={_(\"Structure\")} name={_(\"Traces\")} />\n        <GraphSubplotsPanel group={_(\"Structure\")} name={_(\"Subplots\")} />\n        {this.hasTransforms() && (\n          <GraphTransformsPanel group={_(\"Structure\")} name={_(\"Transforms\")} />\n        )}\n        <StyleLayoutPanel group={_(\"Style\")} name={_(\"General\")} />\n        <StyleTracesPanel group={_(\"Style\")} name={_(\"Traces\")} />\n        {this.hasAxes() && (\n          <StyleAxesPanel group={_(\"Style\")} name={_(\"Axes\")} />\n        )}\n        {this.hasMaps() && (\n          <StyleMapsPanel group={_(\"Style\")} name={_(\"Maps\")} />\n        )}\n        {this.hasLegend() && (\n          <StyleLegendPanel group={_(\"Style\")} name={_(\"Legend\")} />\n        )}\n        {this.hasColorbars() && (\n          <StyleColorbarsPanel group={_(\"Style\")} name={_(\"Color Bars\")} />\n        )}\n        <StyleNotesPanel group={_(\"Annotate\")} name={_(\"Text\")} />\n        <StyleShapesPanel group={_(\"Annotate\")} name={_(\"Shapes\")} />\n        <StyleImagesPanel group={_(\"Annotate\")} name={_(\"Images\")} />\n        {this.hasSliders() && (\n          <StyleSlidersPanel group={_(\"Control\")} name={_(\"Sliders\")} />\n        )}\n        {this.hasMenus() && (\n          <StyleUpdateMenusPanel group={_(\"Control\")} name={_(\"Menus\")} />\n        )}\n        {this.props.children ? this.props.children : null}\n\n        {/* ---custom widgets-- */}\n        <LayoutPanel group={_(\"Annotate\")} name={_(\"Info\")}>\n          <PlotlyFold name=\"PlotlyFold\">\n            <Info attr=\"title\">\n              <p>\n                This custom editor demonstrates the general-purpose container\n                and field components.\n              </p>\n              <p>\n                This is an <code>Info</code> component.\n              </p>\n            </Info>\n          </PlotlyFold>\n        </LayoutPanel>\n        <LayoutPanel group={_(\"Export\")} name=\"image\">\n          <SingleSidebarItem>\n            <Button\n              variant=\"primary\"\n              label=\"Export PNG\"\n              onClick={async () => {\n                const base64 = await plotly.toImage(this.props.divId, {\n                  format: \"png\",\n                  height: 2048,\n                  width: 2048,\n                });\n                download(\"imjoy_chart_editor_export.png\", base64);\n              }}\n            />\n            <Button\n              variant=\"primary\"\n              label=\"Export SVG\"\n              onClick={async () => {\n                const base64 = await plotly.toImage(this.props.divId, {\n                  format: \"svg\",\n                  height: 1024,\n                  width: 1024,\n                });\n                download(\"imjoy_chart_editor_export.svg\", base64);\n              }}\n            />\n          </SingleSidebarItem>\n        </LayoutPanel>\n\n        <SingleSidebarItem>\n          <Button\n            variant=\"primary\"\n            label=\"save\"\n            onClick={async () => {\n              const base64 =\n                \"data:application/json;charset=utf-8,\" +\n                JSON.stringify(this.props.data);\n              download(\"imjoy_chart_editor_export.json\", base64);\n            }}\n          />\n        </SingleSidebarItem>\n      </PanelMenuWrapper>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport plotly from \"plotly.js/dist/plotly\";\nimport PlotlyEditor from \"react-chart-editor\";\nimport CustomEditor from \"./CustomEditor\";\nimport \"react-chart-editor/lib/react-chart-editor.css\";\nimport { imjoyRPC } from \"imjoy-rpc\";\nimport * as Papa from \"papaparse\";\n\nconst config = { editable: true };\n\nfunction loadCSV(url) {\n  return new Promise((resolve, reject) => {\n    Papa.parse(url, {\n      download: true,\n      header: true,\n      dynamicTyping: true,\n      skipEmptyLines: true,\n      error: (err, file, inputElem, reason) => {\n        alert(\"Falied to load the table: \" + reason.toString());\n        reject(reason);\n      },\n      complete: (results) => {\n        resolve(transpose(results.data));\n      },\n    });\n  });\n}\n\nfunction transpose(data) {\n  let result = {};\n  for (let row of data) {\n    for (let [key, value] of Object.entries(row)) {\n      result[key] = result[key] || [];\n      result[key].push(value);\n    }\n  }\n  return result;\n}\n\nfunction randId() {\n  return \"_\" + Math.random().toString(36).substr(2, 9);\n}\n\nfunction getUrlParameter(name) {\n  name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n  var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\");\n  var results = regex.exec(location.search);\n  return results === null\n    ? \"\"\n    : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    let load = getUrlParameter(\"load\");\n    if (load) {\n      loadCSV(load).then((data) => {\n        this.dataSources = data;\n        this.dataSourceOptions = Object.keys(this.dataSources).map((name) => ({\n          value: name,\n          label: name,\n        }));\n        this.forceUpdate();\n      });\n    } else {\n      this.dataSources = {\n        col1: [1, 2, 3], // eslint-disable-line no-magic-numbers\n        col2: [4, 3, 2], // eslint-disable-line no-magic-numbers\n        col3: [17, 13, 9], // eslint-disable-line no-magic-numbers\n      };\n\n      this.dataSourceOptions = Object.keys(this.dataSources).map((name) => ({\n        value: name,\n        label: name,\n      }));\n    }\n    this.state = {\n      data: [],\n      layout: {},\n      frames: [],\n    };\n    // if inside an iframe, setup imjoy rpc\n    if (window.self !== window.top) {\n      const self = this;\n      imjoyRPC.setupRPC({ name: \"ImJoy Chart Editor\" }).then((api) => {\n        api.export({\n          setup() {\n            console.log(\"imjoy-rpc initialized.\");\n          },\n          run(ctx) {\n            if (ctx && ctx.data) {\n              self.state = ctx.data || {\n                data: [],\n                layout: {},\n                frames: [],\n              };\n              self.dataSources = ctx.data.dataSources || {};\n              self.dataSourceOptions =\n                ctx.data.dataSourceOptions ||\n                Object.keys(self.dataSources).map((name) => ({\n                  value: name,\n                  label: name,\n                }));\n              if (self.state.dataSources) delete self.data.dataSources;\n              if (self.state.dataSourceOptions)\n                delete self.data.dataSourceOptions;\n            }\n            self.forceUpdate();\n          },\n          setState(state) {\n            self.state = state;\n            self.forceUpdate();\n          },\n          getState() {\n            return self.state;\n          },\n        });\n      });\n    }\n  }\n\n  async loadData(file) {\n    if (typeof file === \"string\") {\n      if (file.split(\"?\")[0].endsWith(\".json\")) {\n        const response = await fetch(file);\n        const data = await response.json();\n        if (data.data && data.layout) {\n          this.state = data;\n          this.forceUpdate();\n        } else {\n          throw new Error(\"Invalid file type\");\n        }\n      } else if (!file.split(\"?\")[0].endsWith(\".csv\")) {\n        throw new Error(\n          \"Invalid file extension, only .json and .csv are supported\"\n        );\n      }\n    } else if (file instanceof Blob) {\n      if (file.name.endsWith(\".json\")) {\n        const fr = new FileReader();\n        fr.addEventListener(\"load\", (e) => {\n          const data = JSON.parse(fr.result);\n          if (data.data && data.layout) {\n            this.state = data;\n            this.forceUpdate();\n          } else {\n            throw new Error(\"Invalid file type\");\n          }\n        });\n\n        fr.readAsText(file);\n      }\n    }\n    const data = await loadCSV(file);\n    this.dataSources = data;\n    this.dataSourceOptions = Object.keys(this.dataSources).map((name) => ({\n      value: name,\n      label: name,\n    }));\n    this.forceUpdate();\n  }\n\n  render() {\n    const plotDivId = randId();\n    return (\n      <div className=\"app\">\n        <PlotlyEditor\n          data={this.state.data}\n          layout={this.state.layout}\n          config={config}\n          frames={this.state.frames}\n          dataSources={this.dataSources}\n          dataSourceOptions={this.dataSourceOptions}\n          plotly={plotly}\n          onUpdate={(data, layout, frames) =>\n            this.setState({ data, layout, frames })\n          }\n          useResizeHandler\n          debug\n          glByDefault\n          showFieldTooltips\n          advancedTraceTypeSelector\n          divId={plotDivId}\n        >\n          <CustomEditor\n            logoSrc={\"./static/icons/favicon-96x96.png\"}\n            dataSources={this.dataSources}\n            divId={plotDivId}\n            data={this.state}\n            handleLoadData={this.loadData.bind(this)}\n          />\n        </PlotlyEditor>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}