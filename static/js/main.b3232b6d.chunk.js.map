{"version":3,"sources":["CustomEditor.js","App.js","index.js"],"names":["download","filename","base64","element","document","createElement","setAttribute","style","display","body","appendChild","click","removeChild","CustomEditor","props","inputFile","React","createRef","exportWidth","exportHeight","exportFormat","exportFileName","_","this","context","localize","logo","logoSrc","src","dataSources","Object","entries","index","value","push","length","widgets","widget","type","name","padding","schema","onChange","e","apply","onSubmit","onError","width","objectFit","dangerouslySetInnerHTML","__html","exportChart","format","a","plotly","toImage","divId","height","replace","menuPanelOrder","group","hasTransforms","hasAxes","hasMaps","hasLegend","hasColorbars","hasSliders","hasMenus","children","label","v","forceUpdate","onUpdate","units","options","clearable","defaultValue","variant","onClick","handleLoadData","target","files","ref","current","handleSaveData","data","DefaultEditor","config","editable","loadCSV","url","Promise","resolve","reject","Papa","header","dynamicTyping","skipEmptyLines","error","err","file","inputElem","reason","alert","toString","complete","results","result","row","key","transpose","App","plotDivId","Math","random","substr","_initPromise","_initPromiseResolve","load","RegExp","exec","location","search","decodeURIComponent","getUrlParameter","saveDataHandler","then","dataSourceOptions","keys","map","col1","col2","col3","state","layout","frames","window","self","top","imjoyRPC","setupRPC","api","export","setup","console","log","run","ctx","setState","loadDataSource","loadData","setWidgets","addWidget","removeWidget","w","filter","wd","Error","splice","indexOf","updateWidget","getState","addListener","event","callback","getElementById","on","points","i","customdata","k","pointIndex","x","y","z","undefined","cleanUpPoints","removeAllListeners","setTimeout","split","endsWith","fetch","response","json","Blob","fr","FileReader","addEventListener","JSON","parse","readAsText","className","useResizeHandler","debug","glByDefault","showFieldTooltips","advancedTraceTypeSelector","bind","Component","ReactDOM","render"],"mappings":"uZAiCA,SAASA,EAASC,EAAUC,GAC1B,IAAMC,EAAUC,SAASC,cAAc,KACvCF,EAAQG,aAAa,OAAQJ,GAC7BC,EAAQG,aAAa,WAAYL,GAEjCE,EAAQI,MAAMC,QAAU,OACxBJ,SAASK,KAAKC,YAAYP,GAE1BA,EAAQQ,QAERP,SAASK,KAAKG,YAAYT,G,IAEPU,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,UAAYC,IAAMC,YACvB,EAAKC,YAAc,KACnB,EAAKC,aAAe,KACpB,EAAKC,aAAe,MACpB,EAAKC,eAAiB,qBANL,E,0CASnB,WAAU,IAAD,OACDC,EAAIC,KAAKC,QAAQC,SACjBC,EAAOH,KAAKT,MAAMa,SAAW,cAAC,IAAD,CAAMC,IAAKL,KAAKT,MAAMa,UAEnDE,EAAc,GACpB,GAAIN,KAAKT,MAAMe,YACb,cAA6BC,OAAOC,QAAQR,KAAKT,MAAMe,aAAvD,eAAqE,CAAhE,0BAAOG,EAAP,KAAcC,EAAd,KACHJ,EAAYK,KACV,+BACGF,EADH,IACWC,EAAME,SADRH,IAOf,IAAMI,EAAU,GAChB,GAAIb,KAAKT,MAAMsB,QAAS,CAAC,IAAD,gBACHb,KAAKT,MAAMsB,SADR,yBACbC,EADa,QAEA,SAAhBA,EAAOC,KACTF,EAAQF,KACN,cAAC,aAAD,CAAYK,KAAMF,EAAOE,KAAzB,SACE,qBAAKhC,MAAO,CAAEiC,QAAS,QAAvB,SACE,cAAC,IAAD,CACEC,OAAQJ,EAAOI,OACfC,SAAU,SAACC,GACTN,EAAOK,UAAYL,EAAOK,SAASE,MAAM,KAAM,CAACD,KAElDE,SAAU,SAACF,GACTN,EAAOQ,UAAYR,EAAOQ,SAASD,MAAM,KAAM,CAACD,KAElDG,QAAS,SAACH,GACRN,EAAOS,SAAWT,EAAOS,QAAQF,MAAM,KAAM,CAACD,UAXlBN,EAAOE,OAiBpB,UAAhBF,EAAOC,KAChBF,EAAQF,KACN,cAAC,aAAD,CAAYK,KAAMF,EAAOE,KAAzB,SACE,qBACEhC,MAAO,CAAEwC,MAAO,OAAQC,UAAW,SACnCpB,IAAKS,EAAOT,OAHoBS,EAAOE,OAOpB,SAAhBF,EAAOC,MAChBF,EAAQF,KACN,cAAC,aAAD,CAAYK,KAAMF,EAAOE,KAAzB,SACE,qBAAKhC,MAAO,CAAEiC,QAAS,QAAvB,SACE,qBAAKS,wBAAyB,CAAEC,OAAQb,EAAO5B,WAFf4B,EAAOE,QA/BjD,2BAAwC,IADlB,+BA0CxB,IAAMY,EAAW,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DAClBD,EAASA,GAAU,EAAKhC,aADN,SAEGkC,IAAOC,QAAQ,EAAKzC,MAAM0C,MAAO,CACpDJ,OAAQA,EACRK,OAAQ,EAAKtC,aACb4B,MAAO,EAAK7B,cALI,OAEZhB,EAFY,OAOlBF,EACE,EAAKqB,eAAiB,IAAM+B,EAAOM,QAAQ,YAAa,QACxDxD,GATgB,2CAAH,sDAYjB,OACE,eAAC,mBAAD,CAAkByD,eAAgBpC,KAAKT,MAAM6C,eAA7C,UACGjC,GAAc,KACf,cAAC,mBAAD,CAAkBkC,MAAOtC,EAAE,aAAciB,KAAMjB,EAAE,YACjD,cAAC,qBAAD,CAAoBsC,MAAOtC,EAAE,aAAciB,KAAMjB,EAAE,cAClDC,KAAKsC,iBACJ,cAAC,uBAAD,CAAsBD,MAAOtC,EAAE,aAAciB,KAAMjB,EAAE,gBAEvD,cAAC,mBAAD,CAAkBsC,MAAOtC,EAAE,SAAUiB,KAAMjB,EAAE,aAC7C,cAAC,mBAAD,CAAkBsC,MAAOtC,EAAE,SAAUiB,KAAMjB,EAAE,YAC5CC,KAAKuC,WACJ,cAAC,iBAAD,CAAgBF,MAAOtC,EAAE,SAAUiB,KAAMjB,EAAE,UAE5CC,KAAKwC,WACJ,cAAC,iBAAD,CAAgBH,MAAOtC,EAAE,SAAUiB,KAAMjB,EAAE,UAE5CC,KAAKyC,aACJ,cAAC,mBAAD,CAAkBJ,MAAOtC,EAAE,SAAUiB,KAAMjB,EAAE,YAE9CC,KAAK0C,gBACJ,cAAC,sBAAD,CAAqBL,MAAOtC,EAAE,SAAUiB,KAAMjB,EAAE,gBAElD,cAAC,kBAAD,CAAiBsC,MAAOtC,EAAE,YAAaiB,KAAMjB,EAAE,UAC/C,cAAC,mBAAD,CAAkBsC,MAAOtC,EAAE,YAAaiB,KAAMjB,EAAE,YAChD,cAAC,mBAAD,CAAkBsC,MAAOtC,EAAE,YAAaiB,KAAMjB,EAAE,YAC/CC,KAAK2C,cACJ,cAAC,oBAAD,CAAmBN,MAAOtC,EAAE,WAAYiB,KAAMjB,EAAE,aAEjDC,KAAK4C,YACJ,cAAC,wBAAD,CAAuBP,MAAOtC,EAAE,WAAYiB,KAAMjB,EAAE,WAErDC,KAAKT,MAAMsD,SAAW7C,KAAKT,MAAMsD,SAAW,KAG7C,cAAC,cAAD,CAAaR,MAAOtC,EAAE,QAASiB,KAAMjB,EAAE,QAAvC,SACGc,IAEH,cAAC,cAAD,CAAawB,MAAOtC,EAAE,UAAWiB,KAAK,QAAtC,SACE,eAAC,aAAD,WACE,cAAC,IAAD,CAAO8B,MAAM,QAAb,SACE,cAAC,IAAD,CACEpC,MAAOV,KAAKL,YACZwB,SAAU,SAAC4B,GACT,EAAKpD,YAAcoD,EACnB,EAAKC,eAEPC,SAAU,SAACF,GACT,EAAKpD,YAAcoD,EACnB,EAAKC,eAEPE,MAAM,SAGV,cAAC,IAAD,CAAOJ,MAAM,SAAb,SACE,cAAC,IAAD,CACEpC,MAAOV,KAAKJ,aACZuB,SAAU,SAAC4B,GACT,EAAKnD,aAAemD,EACpB,EAAKC,eAEPC,SAAU,SAACF,GACT,EAAKnD,aAAemD,EACpB,EAAKC,eAEPE,MAAM,SAIV,cAAC,IAAD,CAAOJ,MAAM,SAAb,SACE,cAAC,IAAD,CACEK,QAAS,CACP,CAAEL,MAAO,MAAOpC,MAAO,OACvB,CAAEoC,MAAO,OAAQpC,MAAO,QACxB,CAAEoC,MAAO,OAAQpC,MAAO,QACxB,CAAEoC,MAAO,MAAOpC,MAAO,OACvB,CAAEoC,MAAO,OAAQpC,MAAO,cAE1BA,MAAOV,KAAKH,aACZsB,SAAU,SAAC4B,GACT,EAAKlD,aAAekD,EACpB,EAAKC,eAEPI,WAAW,MAGf,cAAC,IAAD,CAAON,MAAM,YAAb,SACE,cAAC,IAAD,CACEpC,MAAOV,KAAKF,eACZuD,aAAcrD,KAAKF,eACnBmD,SAAU,SAACF,GACT,EAAKjD,eAAiBiD,EACtB,EAAKC,mBAKX,cAAC,IAAD,UACE,cAAC,SAAD,CACEM,QAAQ,UACRR,MAAM,SACNS,QAAS,WACP3B,cAMV,eAAC,oBAAD,WACE,uBACEb,KAAK,OACLI,SAAU,SAACC,GACT,EAAK7B,MAAMiE,eAAepC,EAAEqC,OAAOC,MAAM,KAE3CC,IAAK3D,KAAKR,UACVR,MAAO,CAAEC,QAAS,UAEpB,cAAC,SAAD,CACEqE,QAAQ,UACRR,MAAM,OACNS,QAAS,WACP,EAAK/D,UAAUoE,QAAQxE,cAK7B,cAAC,oBAAD,UACE,cAAC,SAAD,CACEkE,QAAQ,UACRR,MAAM,OACNS,QAAO,sBAAE,sBAAAzB,EAAA,sDACH,EAAKvC,MAAMsE,eACb,EAAKtE,MAAMiE,eAAe,EAAKjE,MAAMuE,MAClClC,EAAY,aAHV,sD,GAjNqBmC,iB,4BCrCpCC,EAAS,CAAEC,UAAU,GAE3B,SAASC,EAAQC,GACf,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,QAAWJ,EAAK,CACd1F,UAAU,EACV+F,QAAQ,EACRC,eAAe,EACfC,gBAAgB,EAChBC,MAAO,SAACC,EAAKC,EAAMC,EAAWC,GAC5BC,MAAM,6BAA+BD,EAAOE,YAC5CX,EAAOS,IAETG,SAAU,SAACC,GACTd,EAMR,SAAmBP,GACjB,IADuB,EACnBsB,EAAS,GADU,cAEPtB,GAFO,IAEvB,2BACE,IADqB,IAAduB,EAAa,QACpB,MAAyB9E,OAAOC,QAAQ6E,GAAxC,eAA8C,CAAzC,0BAAKC,EAAL,KAAU5E,EAAV,KACH0E,EAAOE,GAAOF,EAAOE,IAAQ,GAC7BF,EAAOE,GAAK3E,KAAKD,IALE,8BAQvB,OAAO0E,EAdOG,CAAUJ,EAAQrB,a,IA0PnB0B,E,kDA1Mb,aAAe,IAAD,uBACZ,gBACK3E,QAAU,GACf,EAAK4E,UAjCA,IAAMC,KAAKC,SAASV,SAAS,IAAIW,OAAO,EAAG,GAkChD,EAAKC,aAAe,IAAIzB,SAAQ,SAACC,GAC/B,EAAKyB,oBAAsBzB,KAG7B,IAAI0B,EAnCR,SAAyB/E,GACvBA,EAAOA,EAAKmB,QAAQ,OAAQ,OAAOA,QAAQ,OAAQ,OACnD,IACIgD,EADQ,IAAIa,OAAO,SAAWhF,EAAO,aACrBiF,KAAKC,SAASC,QAClC,OAAmB,OAAZhB,EACH,GACAiB,mBAAmBjB,EAAQ,GAAGhD,QAAQ,MAAO,MA6BpCkE,CAAgB,QA6B3B,GA5BA,EAAKC,gBAAkB,KACnBP,EACF7B,EAAQ6B,GAAMQ,MAAK,SAACzC,GAClB,EAAKxD,YAAcwD,EACnB,EAAK0C,kBAAoBjG,OAAOkG,KAAK,EAAKnG,aAAaoG,KAAI,SAAC1F,GAAD,MAAW,CACpEN,MAAOM,EACP8B,MAAO9B,MAET,EAAKgC,kBAGP,EAAK1C,YAAc,CACjBqG,KAAM,CAAC,EAAG,EAAG,GACbC,KAAM,CAAC,EAAG,EAAG,GACbC,KAAM,CAAC,GAAI,GAAI,IAGjB,EAAKL,kBAAoBjG,OAAOkG,KAAK,EAAKnG,aAAaoG,KAAI,SAAC1F,GAAD,MAAW,CACpEN,MAAOM,EACP8B,MAAO9B,OAGX,EAAK8F,MAAQ,CACXhD,KAAM,GACNiD,OAAQ,GACRC,OAAQ,IAGNC,OAAOC,OAASD,OAAOE,IAAK,CAC9B,IAAMD,EAAI,eACVE,WAASC,SAAS,CAAErG,KAAM,uBAAwBuF,MAAK,SAACe,GACtDA,EAAIC,OAAO,CACHC,MADG,WACM,OAAD,2GACZC,QAAQC,IAAI,0BADA,SAENR,EAAKrB,aAFC,8CAIR8B,IALG,SAKCC,GAAM,OAAD,oGACTA,GAAOA,EAAI5D,SACbkD,EAAKZ,gBAAkBsB,EAAI5D,OAAOsC,iBAEhCsB,GAAOA,EAAI9D,OACboD,EAAKW,SAASD,EAAI9D,MAClBoD,EAAK5G,YAAcsH,EAAI9D,KAAKxD,aAAe,GAC3C4G,EAAKV,kBACHoB,EAAI9D,KAAK0C,mBACTjG,OAAOkG,KAAKS,EAAK5G,aAAaoG,KAAI,SAAC1F,GAAD,MAAW,CAC3CN,MAAOM,EACP8B,MAAO9B,MAEPkG,EAAKJ,MAAMxG,oBAAoB4G,EAAKJ,MAAMxG,YAC1C4G,EAAKJ,MAAMN,0BACNU,EAAKJ,MAAMN,mBAEtBU,EAAKlE,cAjBQ,8CAmBT8E,eAxBG,SAwBYjD,GAAO,OAAD,oHACnBqC,EAAKa,SAASlD,GADK,8CAG3BmD,WA3BS,SA2BEnH,GACTqG,EAAKrG,QAAUA,EACfqG,EAAKlE,eAEPiF,UA/BS,SA+BCnH,GACRoG,EAAKrG,QAAQF,KAAKG,GAClBoG,EAAKlE,eAEPkF,aAnCS,WAoCP,IAAMC,EAAIjB,EAAKrG,QAAQuH,QAAO,SAACC,GAAD,OAAQA,EAAGrH,OAASF,OAAOE,QAAM,GAC/D,IAAImH,EAKF,MAAM,IAAIG,MAAM,qBAAuBxH,OAAOE,MAH9CkG,EAAKrG,QAAQ0H,OAAOrB,EAAKrG,QAAQ2H,QAAQL,GAAI,GAC7CjB,EAAKlE,eAKTyF,aA7CS,SA6CI3H,GACX,IAAMqH,EAAIjB,EAAKrG,QAAQuH,QAAO,SAACC,GAAD,OAAQA,EAAGrH,OAASF,EAAOE,QAAM,GAC/D,IAAImH,EAKF,MAAM,IAAIG,MAAM,qBAAuBxH,EAAOE,MAH9CkG,EAAKrG,QAAQqG,EAAKrG,QAAQ2H,QAAQL,IAAMrH,EACxCoG,EAAKlE,eAKT6E,SAvDS,SAuDAf,GACPI,EAAKW,SAASf,GACdI,EAAKlE,eAEP0F,SA3DS,WA4DP,OAAOxB,EAAKJ,OAEd6B,YA9DS,YA8DyB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACnBhK,SAASiK,eAAe5B,EAAKzB,WAAWsD,GAAGH,GAAO,SAAC9E,GAC7CA,EAAKkF,OACPH,EA3HhB,SAAuBvI,EAAa0I,GAElC,IADA,IAAMlF,EAAO,GACJmF,EAAI,EAAGA,EAAID,EAAOpI,OAAQqI,IAAK,CAEtC,IADA,IAAMC,EAAa,GACnB,MAAc3I,OAAOkG,KAAKnG,GAA1B,eAAwC,CAAnC,IAAI6I,EAAC,KACRD,EAAWC,GAAK7I,EAAY6I,GAAGH,EAAOC,GAAGG,YAE3CtF,EAAKnD,KAAK,CACRyI,WAAYJ,EAAOC,GAAGG,WACtBC,EAAGL,EAAOC,GAAGI,EACbC,EAAGN,EAAOC,GAAGK,EACbC,EAAGP,EAAOC,GAAGM,QAAKC,EAClBN,WAAYA,IAGhB,OAAOpF,EA4GgB2F,CAAcvC,EAAK5G,YAAawD,EAAKkF,SAE9CH,EAAS/E,OAIf4F,mBAvES,SAuEUd,GACjB/J,SAASiK,eAAe5B,EAAKzB,WAAWiE,mBAAmBd,SAhHvD,S,qDAuHd,WAAqB,IAAD,OAClBe,YAAW,WACT,EAAK7D,wBACJ,K,6DAGL,WAAejB,GAAf,4BAAA/C,EAAA,yDACsB,kBAAT+C,EADb,qBAEQA,EAAK+E,MAAM,KAAK,GAAGC,SAAS,SAFpC,iCAG6BC,MAAMjF,GAHnC,cAGYkF,EAHZ,gBAIyBA,EAASC,OAJlC,YAIYlG,EAJZ,QAKeA,OAAQA,EAAKiD,OAL5B,iBAMQ/G,KAAK6H,SAAS/D,GACd9D,KAAKgD,cAPb,8BASc,IAAIsF,MAAM,qBATxB,mCAWgBzD,EAAK+E,MAAM,KAAK,GAAGC,SAAS,QAX5C,uBAYY,IAAIvB,MACR,6DAbR,gCAgBazD,aAAgBoF,MACrBpF,EAAK7D,KAAK6I,SAAS,YACfK,EAAK,IAAIC,YACZC,iBAAiB,QAAQ,SAAChJ,GAC3B,IAAM0C,EAAOuG,KAAKC,MAAMJ,EAAG9E,QAC3B,IAAItB,EAAKA,OAAQA,EAAKiD,OAIpB,MAAM,IAAIuB,MAAM,qBAHhB,EAAKT,SAAS/D,GACd,EAAKd,iBAMTkH,EAAGK,WAAW1F,IA7BpB,yBAgCqBX,EAAQW,GAhC7B,QAgCQf,EAhCR,OAiCE9D,KAAKM,YAAcwD,EACnB9D,KAAKwG,kBAAoBjG,OAAOkG,KAAKzG,KAAKM,aAAaoG,KAAI,SAAC1F,GAAD,MAAW,CACpEN,MAAOM,EACP8B,MAAO9B,MAEThB,KAAKgD,cAtCP,iD,2EAyCA,WAAU,IAAD,OACP,OACE,qBAAKwH,UAAU,MAAf,SACE,cAAC,IAAD,CACE1G,KAAM9D,KAAK8G,MAAMhD,KACjBiD,OAAQ/G,KAAK8G,MAAMC,OACnB/C,OAAQA,EACRgD,OAAQhH,KAAK8G,MAAME,OACnB1G,YAAaN,KAAKM,YAClBkG,kBAAmBxG,KAAKwG,kBACxBzE,OAAQA,IACRkB,SAAU,SAACa,EAAMiD,EAAQC,GACvB,EAAKa,SAAS,CAAE/D,OAAMiD,SAAQC,YAEhCyD,kBAAgB,EAChBC,OAAK,EACLC,aAAW,EACXC,mBAAiB,EACjBC,2BAAyB,EACzB5I,MAAOjC,KAAKyF,UAhBd,SAkBE,cAAC,EAAD,CACErF,QAAS,mCACTE,YAAaN,KAAKM,YAClB2B,MAAOjC,KAAKyF,UACZ3B,KAAM9D,KAAK8G,MACXjG,QAASb,KAAKa,QACdgD,eAAgB7D,KAAKsG,gBACrB9C,eAAgBxD,KAAK+H,SAAS+C,KAAK9K,gB,GAnM7B+K,aChElBC,IAASC,OAAO,cAAC,EAAD,IAASpM,SAASiK,eAAe,U","file":"static/js/main.b3232b6d.chunk.js","sourcesContent":["import React from \"react\";\nimport plotly from \"plotly.js/dist/plotly\";\nimport Form from \"@rjsf/core\";\n\nimport {\n  PlotlyFold,\n  PanelMenuWrapper,\n  Info,\n  LayoutPanel,\n  Button,\n  SingleSidebarItem,\n  DefaultEditor,\n  GraphCreatePanel,\n  GraphTransformsPanel,\n  GraphSubplotsPanel,\n  StyleLayoutPanel,\n  StyleAxesPanel,\n  StyleMapsPanel,\n  StyleLegendPanel,\n  StyleNotesPanel,\n  StyleShapesPanel,\n  StyleSlidersPanel,\n  StyleImagesPanel,\n  StyleTracesPanel,\n  StyleColorbarsPanel,\n  StyleUpdateMenusPanel,\n} from \"react-chart-editor\";\nimport Field from \"react-chart-editor/lib/components/fields/Field\";\nimport Logo from \"react-chart-editor/lib/components/widgets/Logo\";\nimport NumericInput from \"react-chart-editor/lib/components/widgets/NumericInput\";\nimport DropdownWidget from \"react-chart-editor/lib/components/widgets/Dropdown\";\nimport TextInput from \"react-chart-editor/lib/components/widgets/TextInput\";\n\nfunction download(filename, base64) {\n  const element = document.createElement(\"a\");\n  element.setAttribute(\"href\", base64);\n  element.setAttribute(\"download\", filename);\n\n  element.style.display = \"none\";\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n}\nexport default class CustomEditor extends DefaultEditor {\n  constructor(props) {\n    super(props);\n    this.inputFile = React.createRef();\n    this.exportWidth = 1024;\n    this.exportHeight = 1024;\n    this.exportFormat = \"png\";\n    this.exportFileName = \"imjoy-chart-export\";\n  }\n\n  render() {\n    const _ = this.context.localize;\n    const logo = this.props.logoSrc && <Logo src={this.props.logoSrc} />;\n\n    const dataSources = [];\n    if (this.props.dataSources) {\n      for (const [index, value] of Object.entries(this.props.dataSources)) {\n        dataSources.push(\n          <li key={index}>\n            {index}:{value.length}\n          </li>\n        );\n      }\n    }\n\n    const widgets = [];\n    if (this.props.widgets) {\n      for (let widget of this.props.widgets) {\n        if (widget.type === \"form\") {\n          widgets.push(\n            <PlotlyFold name={widget.name} key={widget.name}>\n              <div style={{ padding: \"10px\" }}>\n                <Form\n                  schema={widget.schema}\n                  onChange={(e) => {\n                    widget.onChange && widget.onChange.apply(null, [e]);\n                  }}\n                  onSubmit={(e) => {\n                    widget.onSubmit && widget.onSubmit.apply(null, [e]);\n                  }}\n                  onError={(e) => {\n                    widget.onError && widget.onError.apply(null, [e]);\n                  }}\n                />\n              </div>\n            </PlotlyFold>\n          );\n        } else if (widget.type === \"image\") {\n          widgets.push(\n            <PlotlyFold name={widget.name} key={widget.name}>\n              <img\n                style={{ width: \"100%\", objectFit: \"cover\" }}\n                src={widget.src}\n              ></img>\n            </PlotlyFold>\n          );\n        } else if (widget.type === \"html\") {\n          widgets.push(\n            <PlotlyFold name={widget.name} key={widget.name}>\n              <div style={{ padding: \"10px\" }}>\n                <div dangerouslySetInnerHTML={{ __html: widget.body }} />\n              </div>\n            </PlotlyFold>\n          );\n        }\n      }\n    }\n\n    const exportChart = async (format) => {\n      format = format || this.exportFormat;\n      const base64 = await plotly.toImage(this.props.divId, {\n        format: format,\n        height: this.exportHeight,\n        width: this.exportWidth,\n      });\n      download(\n        this.exportFileName + \".\" + format.replace(\"full-json\", \"json\"),\n        base64\n      );\n    };\n    return (\n      <PanelMenuWrapper menuPanelOrder={this.props.menuPanelOrder}>\n        {logo ? logo : null}\n        <GraphCreatePanel group={_(\"Structure\")} name={_(\"Traces\")} />\n        <GraphSubplotsPanel group={_(\"Structure\")} name={_(\"Subplots\")} />\n        {this.hasTransforms() && (\n          <GraphTransformsPanel group={_(\"Structure\")} name={_(\"Transforms\")} />\n        )}\n        <StyleLayoutPanel group={_(\"Style\")} name={_(\"General\")} />\n        <StyleTracesPanel group={_(\"Style\")} name={_(\"Traces\")} />\n        {this.hasAxes() && (\n          <StyleAxesPanel group={_(\"Style\")} name={_(\"Axes\")} />\n        )}\n        {this.hasMaps() && (\n          <StyleMapsPanel group={_(\"Style\")} name={_(\"Maps\")} />\n        )}\n        {this.hasLegend() && (\n          <StyleLegendPanel group={_(\"Style\")} name={_(\"Legend\")} />\n        )}\n        {this.hasColorbars() && (\n          <StyleColorbarsPanel group={_(\"Style\")} name={_(\"Color Bars\")} />\n        )}\n        <StyleNotesPanel group={_(\"Annotate\")} name={_(\"Text\")} />\n        <StyleShapesPanel group={_(\"Annotate\")} name={_(\"Shapes\")} />\n        <StyleImagesPanel group={_(\"Annotate\")} name={_(\"Images\")} />\n        {this.hasSliders() && (\n          <StyleSlidersPanel group={_(\"Control\")} name={_(\"Sliders\")} />\n        )}\n        {this.hasMenus() && (\n          <StyleUpdateMenusPanel group={_(\"Control\")} name={_(\"Menus\")} />\n        )}\n        {this.props.children ? this.props.children : null}\n\n        {/* ---custom widgets-- */}\n        <LayoutPanel group={_(\"Info\")} name={_(\"Info\")}>\n          {widgets}\n        </LayoutPanel>\n        <LayoutPanel group={_(\"Export\")} name=\"image\">\n          <PlotlyFold>\n            <Field label=\"Width\">\n              <NumericInput\n                value={this.exportWidth}\n                onChange={(v) => {\n                  this.exportWidth = v;\n                  this.forceUpdate();\n                }}\n                onUpdate={(v) => {\n                  this.exportWidth = v;\n                  this.forceUpdate();\n                }}\n                units=\"px\"\n              />\n            </Field>\n            <Field label=\"Height\">\n              <NumericInput\n                value={this.exportHeight}\n                onChange={(v) => {\n                  this.exportHeight = v;\n                  this.forceUpdate();\n                }}\n                onUpdate={(v) => {\n                  this.exportHeight = v;\n                  this.forceUpdate();\n                }}\n                units=\"px\"\n              />\n            </Field>\n\n            <Field label=\"Format\">\n              <DropdownWidget\n                options={[\n                  { label: \"PNG\", value: \"png\" },\n                  { label: \"JPEG\", value: \"jpeg\" },\n                  { label: \"WEBP\", value: \"webp\" },\n                  { label: \"SVG\", value: \"svg\" },\n                  { label: \"JSON\", value: \"full-json\" },\n                ]}\n                value={this.exportFormat}\n                onChange={(v) => {\n                  this.exportFormat = v;\n                  this.forceUpdate();\n                }}\n                clearable={false}\n              />\n            </Field>\n            <Field label=\"File Name\">\n              <TextInput\n                value={this.exportFileName}\n                defaultValue={this.exportFileName}\n                onUpdate={(v) => {\n                  this.exportFileName = v;\n                  this.forceUpdate();\n                }}\n              />\n            </Field>\n\n            <Field>\n              <Button\n                variant=\"primary\"\n                label=\"Export\"\n                onClick={() => {\n                  exportChart();\n                }}\n              />\n            </Field>\n          </PlotlyFold>\n        </LayoutPanel>\n        <SingleSidebarItem>\n          <input\n            type=\"file\"\n            onChange={(e) => {\n              this.props.handleLoadData(e.target.files[0]);\n            }}\n            ref={this.inputFile}\n            style={{ display: \"none\" }}\n          />\n          <Button\n            variant=\"primary\"\n            label=\"Load\"\n            onClick={() => {\n              this.inputFile.current.click();\n            }}\n          />\n        </SingleSidebarItem>\n\n        <SingleSidebarItem>\n          <Button\n            variant=\"primary\"\n            label=\"save\"\n            onClick={async () => {\n              if (this.props.handleSaveData)\n                this.props.handleLoadData(this.props.data);\n              else exportChart(\"full-json\");\n            }}\n          />\n        </SingleSidebarItem>\n      </PanelMenuWrapper>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport plotly from \"plotly.js/dist/plotly\";\nimport PlotlyEditor from \"react-chart-editor\";\nimport CustomEditor from \"./CustomEditor\";\nimport \"react-chart-editor/lib/react-chart-editor.css\";\nimport { imjoyRPC } from \"imjoy-rpc\";\nimport * as Papa from \"papaparse\";\n\nconst config = { editable: true };\n\nfunction loadCSV(url) {\n  return new Promise((resolve, reject) => {\n    Papa.parse(url, {\n      download: true,\n      header: true,\n      dynamicTyping: true,\n      skipEmptyLines: true,\n      error: (err, file, inputElem, reason) => {\n        alert(\"Falied to load the table: \" + reason.toString());\n        reject(reason);\n      },\n      complete: (results) => {\n        resolve(transpose(results.data));\n      },\n    });\n  });\n}\n\nfunction transpose(data) {\n  let result = {};\n  for (let row of data) {\n    for (let [key, value] of Object.entries(row)) {\n      result[key] = result[key] || [];\n      result[key].push(value);\n    }\n  }\n  return result;\n}\n\nfunction randId() {\n  return \"_\" + Math.random().toString(36).substr(2, 9);\n}\n\nfunction getUrlParameter(name) {\n  name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n  var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\");\n  var results = regex.exec(location.search);\n  return results === null\n    ? \"\"\n    : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n}\n\nfunction cleanUpPoints(dataSources, points) {\n  const data = [];\n  for (let i = 0; i < points.length; i++) {\n    const customdata = {};\n    for (let k of Object.keys(dataSources)) {\n      customdata[k] = dataSources[k][points[i].pointIndex];\n    }\n    data.push({\n      pointIndex: points[i].pointIndex,\n      x: points[i].x,\n      y: points[i].y,\n      z: points[i].z || undefined,\n      customdata: customdata,\n    });\n  }\n  return data;\n}\nclass App extends Component {\n  constructor() {\n    super();\n    this.widgets = [];\n    this.plotDivId = randId();\n    this._initPromise = new Promise((resolve) => {\n      this._initPromiseResolve = resolve;\n    });\n\n    let load = getUrlParameter(\"load\");\n    this.saveDataHandler = null;\n    if (load) {\n      loadCSV(load).then((data) => {\n        this.dataSources = data;\n        this.dataSourceOptions = Object.keys(this.dataSources).map((name) => ({\n          value: name,\n          label: name,\n        }));\n        this.forceUpdate();\n      });\n    } else {\n      this.dataSources = {\n        col1: [1, 2, 3], // eslint-disable-line no-magic-numbers\n        col2: [4, 3, 2], // eslint-disable-line no-magic-numbers\n        col3: [17, 13, 9], // eslint-disable-line no-magic-numbers\n      };\n\n      this.dataSourceOptions = Object.keys(this.dataSources).map((name) => ({\n        value: name,\n        label: name,\n      }));\n    }\n    this.state = {\n      data: [],\n      layout: {},\n      frames: [],\n    };\n    // if inside an iframe, setup imjoy rpc\n    if (window.self !== window.top) {\n      const self = this;\n      imjoyRPC.setupRPC({ name: \"ImJoy Chart Editor\" }).then((api) => {\n        api.export({\n          async setup() {\n            console.log(\"imjoy-rpc initialized.\");\n            await self._initPromise;\n          },\n          async run(ctx) {\n            if (ctx && ctx.config) {\n              self.saveDataHandler = ctx.config.saveDataHandler;\n            }\n            if (ctx && ctx.data) {\n              self.setState(ctx.data);\n              self.dataSources = ctx.data.dataSources || {};\n              self.dataSourceOptions =\n                ctx.data.dataSourceOptions ||\n                Object.keys(self.dataSources).map((name) => ({\n                  value: name,\n                  label: name,\n                }));\n              if (self.state.dataSources) delete self.state.dataSources;\n              if (self.state.dataSourceOptions)\n                delete self.state.dataSourceOptions;\n            }\n            self.forceUpdate();\n          },\n          async loadDataSource(file) {\n            await self.loadData(file);\n          },\n          setWidgets(widgets) {\n            self.widgets = widgets;\n            self.forceUpdate();\n          },\n          addWidget(widget) {\n            self.widgets.push(widget);\n            self.forceUpdate();\n          },\n          removeWidget() {\n            const w = self.widgets.filter((wd) => wd.name === widget.name)[0];\n            if (w) {\n              // remove widget\n              self.widgets.splice(self.widgets.indexOf(w), 1);\n              self.forceUpdate();\n            } else {\n              throw new Error(\"Widget not found: \" + widget.name);\n            }\n          },\n          updateWidget(widget) {\n            const w = self.widgets.filter((wd) => wd.name === widget.name)[0];\n            if (w) {\n              // replace widget\n              self.widgets[self.widgets.indexOf(w)] = widget;\n              self.forceUpdate();\n            } else {\n              throw new Error(\"Widget not found: \" + widget.name);\n            }\n          },\n          setState(state) {\n            self.setState(state);\n            self.forceUpdate();\n          },\n          getState() {\n            return self.state;\n          },\n          addListener({ event, callback }) {\n            document.getElementById(self.plotDivId).on(event, (data) => {\n              if (data.points)\n                callback(cleanUpPoints(self.dataSources, data.points));\n              else {\n                callback(data);\n              }\n            });\n          },\n          removeAllListeners(event) {\n            document.getElementById(self.plotDivId).removeAllListeners(event);\n          },\n        });\n      });\n    }\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this._initPromiseResolve();\n    }, 0);\n  }\n\n  async loadData(file) {\n    if (typeof file === \"string\") {\n      if (file.split(\"?\")[0].endsWith(\".json\")) {\n        const response = await fetch(file);\n        const data = await response.json();\n        if (data.data && data.layout) {\n          this.setState(data);\n          this.forceUpdate();\n        } else {\n          throw new Error(\"Invalid file type\");\n        }\n      } else if (!file.split(\"?\")[0].endsWith(\".csv\")) {\n        throw new Error(\n          \"Invalid file extension, only .json and .csv are supported\"\n        );\n      }\n    } else if (file instanceof Blob) {\n      if (file.name.endsWith(\".json\")) {\n        const fr = new FileReader();\n        fr.addEventListener(\"load\", (e) => {\n          const data = JSON.parse(fr.result);\n          if (data.data && data.layout) {\n            this.setState(data);\n            this.forceUpdate();\n          } else {\n            throw new Error(\"Invalid file type\");\n          }\n        });\n\n        fr.readAsText(file);\n      }\n    }\n    const data = await loadCSV(file);\n    this.dataSources = data;\n    this.dataSourceOptions = Object.keys(this.dataSources).map((name) => ({\n      value: name,\n      label: name,\n    }));\n    this.forceUpdate();\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <PlotlyEditor\n          data={this.state.data}\n          layout={this.state.layout}\n          config={config}\n          frames={this.state.frames}\n          dataSources={this.dataSources}\n          dataSourceOptions={this.dataSourceOptions}\n          plotly={plotly}\n          onUpdate={(data, layout, frames) => {\n            this.setState({ data, layout, frames });\n          }}\n          useResizeHandler\n          debug\n          glByDefault\n          showFieldTooltips\n          advancedTraceTypeSelector\n          divId={this.plotDivId}\n        >\n          <CustomEditor\n            logoSrc={\"./static/icons/favicon-96x96.png\"}\n            dataSources={this.dataSources}\n            divId={this.plotDivId}\n            data={this.state}\n            widgets={this.widgets}\n            handleSaveData={this.saveDataHandler}\n            handleLoadData={this.loadData.bind(this)}\n          />\n        </PlotlyEditor>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}